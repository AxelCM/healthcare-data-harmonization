/*
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package cloud.verticals.foundations.dataharmonization.debug.proto;

option java_package = "com.google.cloud.verticals.foundations.dataharmonization.debug.proto";

// Represents a position in Whistle source code.
message SourcePosition {
  // Line number, starting at 1.
  int32 line = 1;

  // Column number, starting at 0 (byte count).
  int32 column = 2;
}

// Represents a snippet of Whistle code with a start and end position.
message Source {
  // The position of the first character of a source snippet.
  SourcePosition start = 1;

  // The position of the last character of a source snippet.
  SourcePosition end = 2;
}

// Represents information about a source file.
message FileInfo {
  string url = 1;
}

// Represents information about an import.
message ImportInfo {
  string path_code = 1;
}

// Represents information about a function.
message FunctionInfo {
  enum FunctionType {
    // Function type was not set.
    UNSPECIFIED = 0;

    // The function is delcared by a user in a Whistle file.
    DECLARED = 1;

    // The function is generated by the transpiler from a block expression.
    BLOCK = 2;

    // The function is generated by the transpiler from an expression intended
    // to be consumed as a lambda/closure rather than the value.
    LAMBDA = 3;

    // Special case for transpiler generated lambda which the user may not
    // expect to see mentioned in stack traces.
    IMPLICIT = 4;

    // The function is generated by the transpiler from the root mappings.
    ROOT = 5;

    // The function is not a Whistle function, but is a native (e.x. Java)
    // function interoperated into Whistle.
    NATIVE = 6;
  }

  // The type of function.
  FunctionType type = 1;
}

// Information about a specific Symbol use.
message SymbolReference {
  enum Type {
    UNSPECIFIED = 0;
    VARIABLE = 1;
    FUNCTION = 2;
    PACKAGE = 3;
  }

  // Where in the original code is the symbol (start position to end position).
  Source position = 1;

  // The type of the symbol.
  Type type = 2;

  // Whether this is where the symbol is defined (rather than just used).
  bool definition = 3;

  // The text name of the symbol (e.x. function name, var name, etc).
  string name = 4;

  // Is a previously defined symbol being written at this location.
  bool is_write = 5;

  // The environment where this symbol ref is declared, i.e for variable
  // references (and merges on declared variables) this would be the
  // environment of the declared parent variable.

  // This field is used by variable symbol types, and depends on Whistle
  // environment blocks and function defn blocks having unique random ID's, i.e
  // function definition blocks and Whistle code blocks will never have
  // overlapping environment ID's.
  //
  // The uniqueness of these ID's allows us to set the scope for variables
  // symbols and use this field when implementing the LSP goto functionality.
  // Depending on the scope of the variable, we navigate to the corresponding
  // defn or write symbol.
  string environment = 6;
}

// A collection of (related) symbols.
message Symbols {
  repeated SymbolReference symbols = 1;
}
