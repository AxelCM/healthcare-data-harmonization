package fhir_r3r4

import "../ResourceBase.wstl"

// Description: Maps the common fields in FHIR STU3 and FHIR R4
//
// Argument(s):
//   slot : FHIR Slot resource
//
// Output(s):
//   FHIR Slot Resource
//
def SlotBase(slot) {
  resourcebase::ResourceBase(slot)
  identifier: slot.identifier
  serviceType: slot.serviceType
  specialty: slot.specialty
  appointmentType: slot.appointmentType
  start: slot.start
  end: slot.end
  overbooked: slot.overbooked
  comment: slot.comment
}

// Description: Converts a FHIR STU3 Slot resource to FHIR R4 Slot resource.
//
// Argument(s):
//   slot : FHIR STU3 Slot resource https://www.hl7.org/fhir/stu3/slot.html
//
// Output(s):
//   FHIR R4 Slot Resource https://www.hl7.org/fhir/r4/slot.html
//
def R3SlotToR4(slot) {
  SlotBase(slot)
  contained: datatypes::R3ResourceToR4(slot.contained[])
  schedule: datatypes::R3ReferenceToR4(slot.schedule)
  status: slot.status
  serviceCategory: R3Slot_ServiceCategoryToR4("https://www.hl7.org/fhir/R4/slot-definitions.html#Slot.serviceCategory", slot.extension, slot.serviceCategory)
}

// Description: Converts a FHIR R4 Slot resource to FHIR STU3 Slot resource.
//
// Argument(s):
//   slot : FHIR R4 Slot resource https://www.hl7.org/fhir/r4/slot.html
//
// Output(s):
//   FHIR STU3 Slot Resource https://www.hl7.org/fhir/stu3/slot.html
//
def R4SlotToR3(slot) {
  SlotBase(slot)
  contained: datatypes::R4ResourceToR3(slot.contained[])
  schedule: datatypes::R4ReferenceToR3(slot.schedule)
  status: slot.status
  serviceCategory: slot.serviceCategory[0]
  extension[]: extension::BuildCodeableConceptExtension("https://www.hl7.org/fhir/R4/slot-definitions.html#Slot.serviceCategory", slot.serviceCategory[])
}

// Description: Converts a FHIR STU3 Slot.serviceCategory to FHIR R4 Slot.serviceCategory.
//
// Argument(s):
//   data : FHIR STU3 Slot.serviceCategory https://www.hl7.org/fhir/stu3/slot-definitions.html#Slot.serviceCategory
//
// Output(s):
//   FHIR R4 Slot.serviceCategory https://www.hl7.org/fhir/r4/slot-definitions.html#Slot.serviceCategory
//
def R3Slot_ServiceCategoryToR4(url, extension, data) {
  var serviceCategory: extension::fetchCodeableConceptArray(url, extension)
  if serviceCategory then {
    serviceCategory
  } else {
    arrayOf(data)
  }
}
