package matching_rules

import "class://com.google.cloud.verticals.foundations.dataharmonization.plugins.reconciliation.ReconciliationPlugin"
import "class://com.google.cloud.verticals.foundations.dataharmonization.plugins.environment.EnvironmentPlugin";

import "./Account/matching-rules.wstl"
import "./AllergyIntolerance/matching-rules.wstl"
import "./Appointment/matching-rules.wstl"
import "./Bundle/matching-rules.wstl"
import "./Condition/matching-rules.wstl"
import "./Coverage/matching-rules.wstl"
import "./Device/matching-rules.wstl"
import "./DiagnosticReport/matching-rules.wstl"
import "./Encounter/matching-rules.wstl"
import "./EpisodeOfCare/matching-rules.wstl"
import "./ExplanationOfBenefit/matching-rules.wstl"
import "./Goal/matching-rules.wstl"
import "./Immunization/matching-rules.wstl"
import "./Linkage/matching-rules.wstl"
import "./List/matching-rules.wstl"
import "./Location/matching-rules.wstl"
import "./Medication/matching-rules.wstl"
import "./MedicationAdministration/matching-rules.wstl"
import "./MedicationRequest/matching-rules.wstl"
import "./MedicationStatement/matching-rules.wstl"
import "./Observation/matching-rules.wstl"
import "./Organization/matching-rules.wstl"
import "./Patient/matching-rules.wstl"
import "./Person/matching-rules.wstl"
import "./Practitioner/matching-rules.wstl"
import "./PractitionerRole/matching-rules.wstl"
import "./Procedure/matching-rules.wstl"
import "./RelatedPerson/matching-rules.wstl"
import "./ServiceRequest/matching-rules.wstl"
import "./Specimen/matching-rules.wstl"
import "./SupplyDelivery/matching-rules.wstl"
import "./constants.wstl"

def AssignStableId(required resource) {
  var config: GetMatchingConfig(resource.resourceType)

  var stableIdIdentifier: recon::assignStableId(SpannerDatabase(), config, resource)
  if stableIdIdentifier then {
    if recon::shouldAssignStableIdToIdentifier(resource.resourceType) then {
      var resource.identifier[]: stableIdIdentifier
    } else {
      var resource.meta.tag[]: createStableIdTag(stableIdIdentifier)
    }
  }
}

def createStableIdTag(stableIdIdentifier) {
  system: stableIdIdentifier.system
  code: stableIdIdentifier.value
  if stableIdIdentifier.type.text then {
    extension[0].url: "urn:oid:google/reconciliation-stable-id-detail"
    extension[0].valueString: stableIdIdentifier.type.text
  }
}

def AssignStableIds(required resources, fragments) {
  recon::addStableIds(SpannerDatabase(), resources, fragments, GetAllMatchingConfigs())
}

def GetAllMatchingConfigs() {
  Account: AccountConfig()
  AllergyIntolerance: AllergyIntoleranceConfig()
  Appointment: AppointmentConfig()
  Bundle: BundleConfig()
  Condition: ConditionConfig()
  Coverage: CoverageConfig()
  Device: DeviceConfig()
  DiagnosticReport: DiagnosticReportConfig()
  Encounter: EncounterConfig()
  EpisodeOfCare: EpisodeOfCareConfig()
  ExplanationOfBenefit: ExplanationOfBenefitConfig()
  Goal: GoalConfig()
  Immunization: ImmunizationConfig()
  Linkage: LinkageConfig()
  List: ListConfig()
  Location: LocationConfig()
  Medication: MedicationConfig()
  MedicationAdministration: MedicationAdministrationConfig()
  MedicationRequest: MedicationRequestConfig()
  MedicationStatement: MedicationStatementConfig()
  Observation: ObservationConfig()
  Organization: OrganizationConfig()
  Patient: PatientConfig()
  Person: PersonConfig()
  Practitioner: PractitionerConfig()
  PractitionerRole: PractitionerRoleConfig()
  Procedure: ProcedureConfig()
  RelatedPerson: RelatedPersonConfig()
  ServiceRequest: ServiceRequestConfig()
  Specimen: SpecimenConfig()
  SupplyDelivery: SupplyDeliveryConfig()
}

def GetMatchingConfig(resourceType) get(GetAllMatchingConfigs(), resourceType)

// Description: Constructs a Resource creation timestamp extension to support FHIR reconciliation
//
// Argument(s):
//   Timestamp: https://www.hl7.org/fhir/extensibility.html
//
// Output(s):
//   ReconciledTimestampExtension
//
def Build_ReconciledTimestampExtension(TS) {
  url: "urn:oid:google/reconciliation-timestamp"
  valueInstant: TS
}